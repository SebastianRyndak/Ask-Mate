Index: server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from flask import Flask, render_template, request, redirect, url_for\r\nimport time, connection\r\nimport os\r\nimport data_manager\r\n\r\napp = Flask(__name__)\r\npictures_questions = \".\\\\static\\\\uploads_pictures_questions\"\r\napp.config[\"UPLOAD_PICTURE_FOLDER\"] = pictures_questions\r\npictures_answers = '.\\\\static\\\\uploads_pictures_answers'\r\napp.config[\"UPLOAD_PICTURE_ANSWERS\"] = pictures_answers\r\napp.config[\"ALLOWED_IMAGE_EXTENSIONS\"] = [\"JPG\", \"PNG\"]\r\n\r\n\r\n@app.route(\"/vote/<id>/<value>\")\r\ndef list_voting(id, value):\r\n    data = data_manager.vote_counter(id, value)\r\n    connection.export_data(\"./sample_data/question.csv\", data, data_manager.QUESTION_HEADERS, \"w\")\r\n    return redirect(\"/\")\r\n\r\n\r\n@app.route(\"/question/vote/<question_id>/<answer_id>/<value>\")\r\ndef list_answer_voting(question_id, answer_id, value):\r\n    ans_list = data_manager.vote_for_answers(answer_id, value, question_id)\r\n    connection.export_data(\"sample_data/answer.csv\", ans_list, data_manager.ANSWER_HEADERS, \"w\")\r\n    return redirect(f\"/question/{question_id}\")\r\n\r\n \r\n@app.route(\"/\")\r\n@app.route(\"/list\")\r\ndef question_list():\r\n    questions_list, table_headers = data_manager.prepare_table_to_display()\r\n    return render_template(\"list.html\", questions_list=questions_list, table_headers=table_headers)\r\n\r\n\r\n@app.route(\"/add-question\", methods=['GET', 'POST'])\r\ndef add_information_about_question():\r\n    if request.method == \"POST\":\r\n        ID = data_manager.ID_gen()\r\n        unix_time = int(time.time())\r\n        title = request.form[\"title\"]\r\n        question = request.form[\"question\"]\r\n        image = request.files[\"image\"]\r\n        if image.filename != \"\":\r\n            if not data_manager.allowed_image(image.filename):\r\n                return redirect(request.url)\r\n            image.save(os.path.join(app.config[\"UPLOAD_PICTURE_FOLDER\"], image.filename))\r\n\r\n            dic = {\"id\": str(ID), \"submission_time\": str(unix_time), \"view_number\": \"0\", \"vote_number\": \"0\", \"title\": title, \"message\": question, \"Image\": \"../static/uploads_pictures_questions/\" + str(image.filename)}\r\n        else:\r\n            dic = {\"id\": str(ID), \"submission_time\": str(unix_time), \"view_number\": \"0\", \"vote_number\": \"0\", \"title\": title, \"message\": question, \"Image\": \"\"}\r\n        connection.export_data(\"./sample_data/question.csv\", dic, data_manager.QUESTION_HEADERS, \"a\")\r\n        return redirect(\"/\")\r\n    return render_template(\"add-question.html\")\r\n\r\n\r\n@app.route(\"/<value>/<descend>\")\r\ndef prepare_sorted_table_to_display(descend, value):\r\n    questions_list, table_headers = data_manager.prepare_table_to_display(int(descend), value)\r\n    return render_template(\"list.html\", questions_list=questions_list, table_headers=table_headers)\r\n\r\n\r\n@app.route('/question')\r\n@app.route('/question/<question_id>', methods=[\"POST\", \"GET\"])\r\ndef question(question_id):\r\n    if request.method == \"POST\":\r\n        data_manager.save_new_answer(request.form.get(\"message\"), request.files[\"image\"], question_id)\r\n    title, message, image = data_manager.find_title_and_message(question_id)\r\n    pack, answer_len = data_manager.find_all_answer_to_question(question_id)\r\n    return render_template('question.html', head_title=title, title_message=message, package=pack, lenth=answer_len, question_id=question_id, image=image)\r\n\r\n\r\n@app.route(\"/question/<question_id>/new-answer\", methods=[\"POST\", \"GET\"])\r\ndef add_new_answer(question_id):\r\n    question = data_manager.find_title_and_message(question_id)[0]\r\n    return render_template(\"new_answer.html\", question_id=question_id, question=question)\r\n\r\n\r\n@app.route(\"/answer/<answer_id>/delete\", methods=[\"POST\", \"GET\"])\r\ndef delete_answer(answer_id):\r\n    question_id = data_manager.get_question_id_by_answer_id(answer_id)\r\n    data_manager.delete_answer_from_csv_by_id(answer_id)\r\n    return redirect(f\"../../question/{question_id}\")\r\n\r\n\r\n@app.route('/question/<int:question_id>/delete', methods=[\"POST\"])\r\ndef delete_question(question_id):\r\n    data_manager.delete_question(question_id)\r\n    questions_list, table_headers = data_manager.prepare_table_to_display()\r\n    return render_template('list.html', questions_list=questions_list, table_headers=table_headers)\r\n\r\n\r\n@app.route('/question/<int:question_id>/edit', methods=[\"GET\", \"POST\"])\r\ndef edit_questions(question_id):\r\n    if request.method == \"POST\":\r\n        question_record = data_manager.find_question(question_id)\r\n        question_record['submission_time'] = str(int(time.time()))\r\n        question_record['title'] = request.form[\"title\"]\r\n        question_record['message'] = request.form[\"question\"]\r\n        image = request.files[\"image\"]\r\n        if image.filename != \"\":\r\n            if not data_manager.allowed_image(image.filename):\r\n                return redirect(request.url)\r\n            image.save(os.path.join(app.config[\"UPLOAD_PICTURE_FOLDER\"], image.filename))\r\n            question_record['image'] = \"../static/uploads_pictures_questions/\" + str(image.filename)\r\n        data_manager.overwrite(question_id, question_record)\r\n        return redirect(f'/question/{question_id}')\r\n    title, message, image = data_manager.find_title_and_message(question_id)\r\n    return render_template('edit_questions.html', title=title, message=message, image=image)\r\n\r\n  \r\nif __name__ == \"__main__\":\r\n    app.run(debug=True)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server.py b/server.py
--- a/server.py	
+++ b/server.py	
@@ -11,102 +11,118 @@
 app.config["ALLOWED_IMAGE_EXTENSIONS"] = ["JPG", "PNG"]
 
 
-@app.route("/vote/<id>/<value>")
-def list_voting(id, value):
-    data = data_manager.vote_counter(id, value)
-    connection.export_data("./sample_data/question.csv", data, data_manager.QUESTION_HEADERS, "w")
-    return redirect("/")
+# @app.route("/vote/<id>/<value>")
+# def list_voting(id, value):
+#     data = data_manager.vote_counter(id, value)
+#     connection.export_data("./sample_data/question.csv", data, data_manager.QUESTION_HEADERS, "w")
+#     return redirect("/")
+#
+#
+# @app.route("/question/vote/<question_id>/<answer_id>/<value>")
+# def list_answer_voting(question_id, answer_id, value):
+#     ans_list = data_manager.vote_for_answers(answer_id, value, question_id)
+#     connection.export_data("sample_data/answer.csv", ans_list, data_manager.ANSWER_HEADERS, "w")
+#     return redirect(f"/question/{question_id}")
+#
+#
+# @app.route("/")
+# @app.route("/list")
+# def question_list():
+#     questions_list, table_headers = data_manager.prepare_table_to_display()
+#     return render_template("list.html", questions_list=questions_list, table_headers=table_headers)
+#
+#
+# @app.route("/add-question", methods=['GET', 'POST'])
+# def add_information_about_question():
+#     if request.method == "POST":
+#         ID = data_manager.ID_gen()
+#         unix_time = int(time.time())
+#         title = request.form["title"]
+#         question = request.form["question"]
+#         image = request.files["image"]
+#         if image.filename != "":
+#             if not data_manager.allowed_image(image.filename):
+#                 return redirect(request.url)
+#             image.save(os.path.join(app.config["UPLOAD_PICTURE_FOLDER"], image.filename))
+#
+#             dic = {"id": str(ID), "submission_time": str(unix_time), "view_number": "0", "vote_number": "0", "title": title, "message": question, "Image": "../static/uploads_pictures_questions/" + str(image.filename)}
+#         else:
+#             dic = {"id": str(ID), "submission_time": str(unix_time), "view_number": "0", "vote_number": "0", "title": title, "message": question, "Image": ""}
+#         connection.export_data("./sample_data/question.csv", dic, data_manager.QUESTION_HEADERS, "a")
+#         return redirect("/")
+#     return render_template("add-question.html")
 
 
-@app.route("/question/vote/<question_id>/<answer_id>/<value>")
-def list_answer_voting(question_id, answer_id, value):
-    ans_list = data_manager.vote_for_answers(answer_id, value, question_id)
-    connection.export_data("sample_data/answer.csv", ans_list, data_manager.ANSWER_HEADERS, "w")
-    return redirect(f"/question/{question_id}")
+# @app.route("/<value>/<descend>")
+# def prepare_sorted_table_to_display(descend, value):
+#     questions_list, table_headers = data_manager.prepare_table_to_display(int(descend), value)
+#     return render_template("list.html", questions_list=questions_list, table_headers=table_headers)
 
- 
-@app.route("/")
-@app.route("/list")
-def question_list():
-    questions_list, table_headers = data_manager.prepare_table_to_display()
-    return render_template("list.html", questions_list=questions_list, table_headers=table_headers)
-
-
-@app.route("/add-question", methods=['GET', 'POST'])
-def add_information_about_question():
-    if request.method == "POST":
-        ID = data_manager.ID_gen()
-        unix_time = int(time.time())
-        title = request.form["title"]
-        question = request.form["question"]
-        image = request.files["image"]
-        if image.filename != "":
-            if not data_manager.allowed_image(image.filename):
-                return redirect(request.url)
-            image.save(os.path.join(app.config["UPLOAD_PICTURE_FOLDER"], image.filename))
-
-            dic = {"id": str(ID), "submission_time": str(unix_time), "view_number": "0", "vote_number": "0", "title": title, "message": question, "Image": "../static/uploads_pictures_questions/" + str(image.filename)}
-        else:
-            dic = {"id": str(ID), "submission_time": str(unix_time), "view_number": "0", "vote_number": "0", "title": title, "message": question, "Image": ""}
-        connection.export_data("./sample_data/question.csv", dic, data_manager.QUESTION_HEADERS, "a")
-        return redirect("/")
-    return render_template("add-question.html")
-
-
-@app.route("/<value>/<descend>")
-def prepare_sorted_table_to_display(descend, value):
-    questions_list, table_headers = data_manager.prepare_table_to_display(int(descend), value)
-    return render_template("list.html", questions_list=questions_list, table_headers=table_headers)
-
-
-@app.route('/question')
-@app.route('/question/<question_id>', methods=["POST", "GET"])
-def question(question_id):
+
+@app.route('/answer/<answer_id>/edit', methods=["POST", "GET"])
+def edit_answer(answer_id):
     if request.method == "POST":
-        data_manager.save_new_answer(request.form.get("message"), request.files["image"], question_id)
-    title, message, image = data_manager.find_title_and_message(question_id)
-    pack, answer_len = data_manager.find_all_answer_to_question(question_id)
-    return render_template('question.html', head_title=title, title_message=message, package=pack, lenth=answer_len, question_id=question_id, image=image)
-
-
-@app.route("/question/<question_id>/new-answer", methods=["POST", "GET"])
-def add_new_answer(question_id):
-    question = data_manager.find_title_and_message(question_id)[0]
-    return render_template("new_answer.html", question_id=question_id, question=question)
-
 
-@app.route("/answer/<answer_id>/delete", methods=["POST", "GET"])
-def delete_answer(answer_id):
-    question_id = data_manager.get_question_id_by_answer_id(answer_id)
-    data_manager.delete_answer_from_csv_by_id(answer_id)
-    return redirect(f"../../question/{question_id}")
-
-
-@app.route('/question/<int:question_id>/delete', methods=["POST"])
-def delete_question(question_id):
-    data_manager.delete_question(question_id)
-    questions_list, table_headers = data_manager.prepare_table_to_display()
-    return render_template('list.html', questions_list=questions_list, table_headers=table_headers)
-
-
-@app.route('/question/<int:question_id>/edit', methods=["GET", "POST"])
-def edit_questions(question_id):
-    if request.method == "POST":
-        question_record = data_manager.find_question(question_id)
-        question_record['submission_time'] = str(int(time.time()))
-        question_record['title'] = request.form["title"]
-        question_record['message'] = request.form["question"]
-        image = request.files["image"]
-        if image.filename != "":
-            if not data_manager.allowed_image(image.filename):
-                return redirect(request.url)
-            image.save(os.path.join(app.config["UPLOAD_PICTURE_FOLDER"], image.filename))
-            question_record['image'] = "../static/uploads_pictures_questions/" + str(image.filename)
-        data_manager.overwrite(question_id, question_record)
         return redirect(f'/question/{question_id}')
-    title, message, image = data_manager.find_title_and_message(question_id)
-    return render_template('edit_questions.html', title=title, message=message, image=image)
+
+    return render_template('edit_answer.html')
+
+
+@app.route('/')
+def print_question():
+    datas = data_manager.get_questions()
+
+    return render_template('testowy.html', datas=datas)
+
+# @app.route('/question')
+# @app.route('/question/<question_id>', methods=["POST", "GET"])
+# def question(question_id):
+#     if request.method == "POST":
+#         data_manager.save_new_answer(request.form.get("message"), request.files["image"], question_id)
+#     title, message, image = data_manager.find_title_and_message(question_id)
+#     pack, answer_len = data_manager.find_all_answer_to_question(question_id)
+#     return render_template('question.html', head_title=title, title_message=message, package=pack, lenth=answer_len, question_id=question_id, image=image)
+#
+#
+# @app.route("/question/<question_id>/new-answer", methods=["POST", "GET"])
+# def add_new_answer(question_id):
+#     question = data_manager.find_title_and_message(question_id)[0]
+#     return render_template("new_answer.html", question_id=question_id, question=question)
+#
+#
+# @app.route("/answer/<answer_id>/delete", methods=["POST", "GET"])
+# def delete_answer(answer_id):
+#     question_id = data_manager.get_question_id_by_answer_id(answer_id)
+#     data_manager.delete_answer_from_csv_by_id(answer_id)
+#     return redirect(f"../../question/{question_id}")
+#
+#
+# @app.route('/question/<int:question_id>/delete', methods=["POST"])
+# def delete_question(question_id):
+#     data_manager.delete_question(question_id)
+#     questions_list, table_headers = data_manager.prepare_table_to_display()
+#     return render_template('list.html', questions_list=questions_list, table_headers=table_headers)
+#
+#
+# @app.route('/question/<int:question_id>/edit', methods=["GET", "POST"])
+# def edit_questions(question_id):
+#     if request.method == "POST":
+#         question_record = data_manager.find_question(question_id)
+#         question_record['submission_time'] = str(int(time.time()))
+#         question_record['title'] = request.form["title"]
+#         question_record['message'] = request.form["question"]
+#         image = request.files["image"]
+#         if image.filename != "":
+#             if not data_manager.allowed_image(image.filename):
+#                 return redirect(request.url)
+#             image.save(os.path.join(app.config["UPLOAD_PICTURE_FOLDER"], image.filename))
+#             question_record['image'] = "../static/uploads_pictures_questions/" + str(image.filename)
+#         data_manager.overwrite(question_id, question_record)
+#         return redirect(f'/question/{question_id}')
+#     title, message, image = data_manager.find_title_and_message(question_id)
+#     return render_template('edit_questions.html', title=title, message=message, image=image)
 
   
 if __name__ == "__main__":
-    app.run(debug=True)
+    app.run(debug=True,
+            port=5001)
